INCLUDE(CheckIncludeFile)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)
INCLUDE(GNUInstallDirs)

SET( CMAKE_INSTALL_LIBEXECDIR  "${CMAKE_INSTALL_LIBEXECDIR}/dng" )

ADD_DEFINITIONS(-DHAVE_CONFIG_H
  "\"-DPACKAGE_STRING=\\\"${PROJ_NAME} ${PROJ_VERSION}\\\"\""
  "\"-DPACKAGE_BUGREPORT=\\\"${PROJ_URL}\\\"\""
)

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCC)
IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF(MSVC)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4100 /wd4101 /wd4189 /wd4512 /wd4275 /wd4251 /wd4706")
  IF(USE_STATIC_LIBS)
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
	
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  ENDIF(USE_STATIC_LIBS)

  # Use the highest warning level for visual studio.
  SET(CMAKE_CXX_WARNING_LEVEL 4)
  IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    STRING(REGEX REPLACE "/W[0-4]" "/W4"
           CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  ELSE(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  ENDIF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
ENDIF(MSVC)

FIND_PACKAGE(ZLIB)
IF(ZLIB_FOUND)
  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
ENDIF(ZLIB_FOUND)

FIND_PACKAGE(Eigen3)
IF(EIGEN3_FOUND)
  INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})
  INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR}/unsupported)
ENDIF(EIGEN3_FOUND)

FIND_PACKAGE(HTSLIB)
IF(HTSLIB_FOUND)
  INCLUDE_DIRECTORIES(${HTSLIB_INCLUDE_DIR})
  LINK_DIRECTORIES(${HTSLIB_LIBRARY_DIRS})
ENDIF(HTSLIB_FOUND)

FIND_PACKAGE(Boost 1.47.0 REQUIRED COMPONENTS program_options filesystem system)
IF(Boost_FOUND)
  ADD_DEFINITIONS(-DBOOST_ALL_NO_LIB -DBOOST_PROGRAM_OPTIONS_NO_LIB)
  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
  IF(NOT Boost_USE_STATIC_LIBS)
    ADD_DEFINITIONS(-DBOOST_DYN_LINK -DBOOST_PROGRAM_OPTIONS_DYN_LINK)
  ENDIF(NOT Boost_USE_STATIC_LIBS)
#  IF(Boost_VERSION LESS 104700)
#    MESSAGE(STATUS "WARNING: Headers from Boost 1.47+ are needed for successful compiling.") 
#  ENDIF(Boost_VERSION LESS 104700)
ENDIF(Boost_FOUND)


ADD_SUBDIRECTORY(contrib/newmat)
ADD_SUBDIRECTORY(utils)
INCLUDE_DIRECTORIES(BEFORE
	"${CMAKE_CURRENT_SOURCE_DIR}/utils"
	"${CMAKE_CURRENT_SOURCE_DIR}/contrib/newmat"
)

#INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/include")

ADD_EXECUTABLE(dng-dnm
  dng-dnm.cc
  snpLike.cc indelLike.cc pairLike.cc
  makeLookup.cc
  pedParser.cc
  bcf2Qcall.cc bcf2Paired.cc
)

ADD_EXECUTABLE(dng-phaser
  dng-phaser.cc
  snpLike.cc indelLike.cc pairLike.cc
  makeLookup.cc
  pedParser.cc
  bcf2Qcall.cc bcf2Paired.cc
)

ADD_EXECUTABLE(dng-call
  dng-call.cc
  lib/call.cc lib/likelihood.cc lib/newick.cc lib/pedigree.cc
)
SET_PROPERTY(TARGET dng-call PROPERTY CXX_STANDARD 14)
SET_PROPERTY(TARGET dng-call PROPERTY CXX_STANDARD_REQUIRED ON)

IF(USE_STATIC_LIBS)
  SET_TARGET_PROPERTIES(dng-dnm    PROPERTIES LINK_SEARCH_END_STATIC On)
  SET_TARGET_PROPERTIES(dng-phaser PROPERTIES LINK_SEARCH_END_STATIC On)
  SET_TARGET_PROPERTIES(dng-call   PROPERTIES LINK_SEARCH_END_STATIC On)
ENDIF(USE_STATIC_LIBS)

TARGET_LINK_LIBRARIES(dng-dnm newmat dngutils)
TARGET_LINK_LIBRARIES(dng-dnm ${ZLIB_LIBRARIES})
TARGET_LINK_LIBRARIES(dng-dnm ${CMAKE_REQUIRED_LIBRARIES})

TARGET_LINK_LIBRARIES(dng-phaser newmat dngutils)
TARGET_LINK_LIBRARIES(dng-phaser ${ZLIB_LIBRARIES})
TARGET_LINK_LIBRARIES(dng-phaser ${CMAKE_REQUIRED_LIBRARIES})

TARGET_LINK_LIBRARIES(dng-call ${HTSLIB_LIBRARIES})
TARGET_LINK_LIBRARIES(dng-call ${Boost_LIBRARIES})

INSTALL(PROGRAMS dng.sh DESTINATION ${CMAKE_INSTALL_BINDIR} RENAME dng)
INSTALL(TARGETS dng-dnm RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} ${PROJ_INSTALL_EXTRA_ARGS})
INSTALL(TARGETS dng-phaser RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} ${PROJ_INSTALL_EXTRA_ARGS})
INSTALL(TARGETS dng-call RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} ${PROJ_INSTALL_EXTRA_ARGS})
