INCLUDE(CheckIncludeFile)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)
INCLUDE(GNUInstallDirs)

SET( CMAKE_INSTALL_LIBEXECDIR  "${CMAKE_INSTALL_LIBEXECDIR}/dng" )

FIND_PACKAGE(ZLIB)
IF(ZLIB_FOUND)
  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
ENDIF(ZLIB_FOUND)

ADD_SUBDIRECTORY(contrib/newmat)
ADD_SUBDIRECTORY(utils)

INCLUDE_DIRECTORIES(BEFORE
	"${CMAKE_CURRENT_SOURCE_DIR}/utils"
	"${CMAKE_CURRENT_SOURCE_DIR}/contrib/newmat"
)

INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/include")

ADD_EXECUTABLE(dng-dnm
  dng-dnm.cc
  snpLike.cc indelLike.cc pairLike.cc
  makeLookup.cc
  pedParser.cc
  bcf2Qcall.cc bcf2Paired.cc
)

ADD_EXECUTABLE(dng-phaser
  dng-phaser.cc
  snpLike.cc indelLike.cc pairLike.cc
  makeLookup.cc
  pedParser.cc
  bcf2Qcall.cc bcf2Paired.cc
)

CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/dng.sh.in"
  "${CMAKE_CURRENT_BINARY_DIR}/dng.sh"
  @ONLY)

CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/version.h.in"
  "${CMAKE_CURRENT_BINARY_DIR}/version.h"
  @ONLY)

IF(USE_STATIC_LIBS)
  SET_TARGET_PROPERTIES(dng-dnm PROPERTIES LINK_SEARCH_END_STATIC On)
  SET_TARGET_PROPERTIES(dng-phaser PROPERTIES LINK_SEARCH_END_STATIC On)
ENDIF(USE_STATIC_LIBS)

TARGET_LINK_LIBRARIES(dng-dnm newmat dngutils)
TARGET_LINK_LIBRARIES(dng-dnm ${ZLIB_LIBRARIES})
TARGET_LINK_LIBRARIES(dng-dnm ${CMAKE_REQUIRED_LIBRARIES})

TARGET_LINK_LIBRARIES(dng-phaser newmat dngutils)
TARGET_LINK_LIBRARIES(dng-phaser ${ZLIB_LIBRARIES})
TARGET_LINK_LIBRARIES(dng-phaser ${CMAKE_REQUIRED_LIBRARIES})

INSTALL(TARGETS dng-dnm RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} ${PROJ_INSTALL_EXTRA_ARGS})
INSTALL(TARGETS dng-phaser RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} ${PROJ_INSTALL_EXTRA_ARGS})
INSTALL(PROGRAMS "${CMAKE_CURRENT_BINARY_DIR}/dng.sh"
  DESTINATION ${CMAKE_INSTALL_BINDIR} RENAME dng)

